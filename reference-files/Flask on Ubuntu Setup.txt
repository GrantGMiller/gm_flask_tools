Based on tutorial at: https://realpython.com/kickstarting-flask-on-ubuntu-setup-and-deployment/

# Steps to get flask running on Ubuntu 16.x with Time4VPS.eu

# Log in as root
# Make new user
adduser newuser
adduser newuser sudo

# Update app-get 
sudo apt-get update

# Install packages we will be using
sudo apt-get install -y python3-pip # to install python packages
sudo apt-get install -y python3-virtualenv # to manage dependencies
sudo apt-get install -y nginx # web server (like apache)
sudo apt-get install -y gunicorn # WSGI to do translation between nginx and flask
sudo apt-get install nano # text editor to make changes from terminal

# Remove default apache2
sudo apt-get remove apache2

# Make alias so calls to "python" call python3 not python 2
alias python=python3
alias pip=pip3

# Make a directory to store our flask app
sudo mkdir /home/www
sudo cd /home/www

# Give "newuser" permission to the new folder
sudo chmod 777 /home/www # This should probably not be so

# Create the virutal environment for our flask project
python -m virtualenv env

# Dive into the new virtual environment
source env/bin/activate

# Install flask in the venv
sudo -H  pip install Flask

# Install gunicorn (WSGI between nginx and flask)
sudo -H  pip install gunicorn

# Make a new folder for your flask app
sudo mkdir flask_project
cd flask_project

# Make a simple flask app to verify the app is configured correctly
sudo nano app.py

# copy-paste this code into app.py
from flask import Flask, jsonify

app = Flask(__name__)


@app.route('/')
def index():
    return 'Flask is running!'


@app.route('/data')
def names():
    data = {"names": ["John", "Jacob", "Julie", "Jennifer"]}
    return jsonify(data)


if __name__ == '__main__':
    app.run()

# Press ctrl-x to save and exit

# Create a dir for static pages
sudo mkdir static

# Navigate to the new "static" dir
cd static

# Create a simple static page using the same nano method above
sudo nano index.html

# copy-paste this into index.html
<h1>Test!</h1>

# Save and close index.html

# Start nginx server
sudo /etc/init.d/nginx start

# Remove the current nginx config
sudo rm /etc/nginx/sites-enabled/default

# Create a new nginx config file
sudo touch /etc/nginx/sites-available/flask_project

# symlink the new config file so nginx loads this at startup
sudo ln -s /etc/nginx/sites-available/flask_project /etc/nginx/sites-enabled/flask_project

# Add settings to nginx config file to work with flask
sudo nano /etc/nginx/sites-enabled/flask_project

# Copy-paste this text into the config file
server {
    location / {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
    location /static {
        alias  /home/www/flask_project/static/;
    }
}

# save and close nano

# nginx will now route all HTTP request to "/" (basically all request) to port 8000

# nginx will now server static files from the flask_project/static directory. This will improve speed of loading static files by bypassing flask

# Restart nginx to enable the new config.
sudo /etc/init.d/nginx restart

# Navigate to the flask app dir if not there already
cd /home/www/flask_project/

# Start gunicorn to link nginx to your flask app
# You can also run this command to restart your flask app at any time
# This will print things to linux terminal
sudo gunicorn app:app -b localhost:8000

# We do not want to manually start gunicorn every time, so we will install "supervisor" to help us
sudo apt-get install supervisor

# Create a new config file for supervisor
sudo nano /etc/supervisor/conf.d/flask_project.conf

# Copy-paste this text into the flask_project.conf file
# (Note the absence of "sudo" in the 'command' entry)
[program:flask_project]
command = gunicorn app:app -b localhost:8000
directory = /home/www/flask_project
user = newuser

# save and close the flask_project.conf file

# Stop gunicorn
sudo pkill gunicorn

# Restart gunicorn using supervisor
sudo supervisorctl reread
sudo supervisorctl update

# We will use git to allow us to make changes on a remote PC and then push changes to the server when we are ready.

# Install git
sudo apt-get install -y git

# Create a dir for your git repo
sudo mkdir /home/git
sudo chmod 777 -r /home/git #prob shouldnt be so, idk if -r actually works but the post-receive file needs to be 777
cd /home/git

# Init the git repo
sudo git init --bare

# Add a script that will be run after a push has been received
sudo nano hooks/post-receive

# Copy-paste the following into that folder

#!/bin/sh
GIT_WORK_TREE=/home/www/flask_project git checkout -f
sudo supervisorctl restart flask_project

# Now the files from your git repo will be copied to the 'flask_project' folder after every push
# And every time this happens supervisor will restart your gunicorn

# Make the 'post-receive' file executeable
sudo chmod +x hooks/post-receive

# On another PC use git and setup remote = "root@www.mydomain.com:/home/git"
# Do a commit and push

